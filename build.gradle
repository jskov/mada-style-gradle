plugins {
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'eclipse'
    id 'dk.mada.style' version '0.9.9'
    id 'dk.mada.buildinfo' version '1.0.1'
}

ext {
    mavenDisplayName = 'Plugin for enforcing java dk.mada coding style'
    mavenDescription = 'A plugin that sets up null-checking and code formatting style for dk.mada development.'
}

group = 'dk.mada.style'

repositories {
    repositories {
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }
    mavenCentral()
}

configurations {
    addedDependencies
}

dependencies {
    // formatter
    implementation "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"

    // null-checker
    implementation "net.ltgt.gradle:gradle-errorprone-plugin:4.0.0"

    // sonar
    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:5.0.0.4638"

    // dependencies added by the plugin
    // not used in the plugin code, but here Dependabot will keep them up to date
    addedDependencies "com.uber.nullaway:nullaway:0.10.26@jar"
    addedDependencies "com.google.errorprone:error_prone_core:2.28.0@jar"

    compileOnly    "org.jspecify:jspecify:0.3.0"
}

processResources {
    // Checksum each configuration file so it is easy for the plugin to reason about their state
    filesMatching('config/datafile-checksums.properties') {
        def eclipseFormatterMadaChecksum = digest(file('src/main/resources/config/spotless/eclipse-formatter-mada.xml'))
        def checkstyleMadaChecksum = digest(file('src/main/resources/config/checkstyle/checkstyle-mada.xml'))
        filter { l -> l.replace('@ECLIPSE_FORMATTER_MADA@', eclipseFormatterMadaChecksum)
                        .replace('@CHECKSTYLE_MADA@',  checkstyleMadaChecksum) }
    }
    // Provide the plugin with versions for the dependencies it adds to the client build
    filesMatching('config/datafile-dependencies.properties') {
        def depVersions = configurations.addedDependencies.collect { f ->
            f.toString().replaceAll(".*files-2.1/", "").replaceFirst("/", "\\\\:").replaceFirst("/", "=").replaceAll("/.*", "")
        }.join('\n')
        filter { l -> l.replace('@DEPENDENCIES@', depVersions) }
    }
}

gradlePlugin {
    website = 'https://github.com/jskov/mada-style-gradle'
    vcsUrl = 'https://github.com/jskov/mada-style-gradle'
    plugins {
        stylePlugin {
            id = 'dk.mada.style'
            displayName = mavenDisplayName
            description = mavenDescription
            tags.set(['error-prone', 'nullaway', 'checkstyle', 'spotless', 'style'])
            implementationClass = 'dk.mada.style.MadaStylePlugin'
        }
    }
}

publishing {
    repositories {
        maven {
            name = "dist"
            url "file://${project.rootProject.file("build/dist").getAbsolutePath()}"
        }
    }
}

project.afterEvaluate { p ->
    tasks.withType(GenerateMavenPom).all {
        getPom().url = 'https://github.com/jskov/mada-style-gradle'
        getPom().name = mavenDisplayName
        getPom().description = mavenDescription

        getPom().developers {
            developer {
                id = 'jskov'
                name = 'Jesper Skov'
                email = 'jskov@mada.dk'
            }
        }
        getPom().licenses {
            license {
                name = 'Licensed under the EUPL-1.2-or-later'
                url = 'https://joinup.ec.europa.eu/sites/default/files/custom-page/attachment/2020-03/EUPL-1.2%20EN.txt'
            }
        }
        getPom().scm {
            connection = 'scm:git:git://github.com/jskov/mada-style-gradle.git'
            developerConnection = 'scm:git:ssh://github.com:jskov/mada-style-gradle.git'
            url = 'https://github.com/jskov/mada-style-gradle/'
        }
    }
}

tasks.eclipse.doLast { project.mkdir("build/pluginUnderTestMetadata") }

String digest(File f) {
    byte[] b = f.readBytes()
    byte[] d = java.security.MessageDigest.getInstance("SHA-256").digest(b)
    return java.util.HexFormat.of().formatHex(d)
}
