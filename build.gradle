plugins {
    id 'com.gradle.plugin-publish' version '1.3.1'
    id 'eclipse'
    id 'dk.mada.reproducible' version '1.0.2'
    id 'dk.mada.style' version '1.1.5'
}

ext {
    mavenDisplayName = 'Plugin for enforcing java dk.mada coding style'
    mavenDescription = 'A plugin that sets up null-checking and code formatting style for dk.mada development.'

    def configDir = layout.getProjectDirectory().dir('src/main/resources/config')
    checkstyleConfigFiles = [configDir.file('checkstyle/checkstyle-mada.xml'),
                             configDir.file('checkstyle/suppressions-mada.xml')]

    errorProneDependencies = project.getProviders().provider(() -> getErrorProneDependencies())
}

group = 'dk.mada.style'

repositories {
    repositories {
        maven { url = uri("https://plugins.gradle.org/m2/") }
    }
    mavenCentral()
    mavenLocal()
}

configurations {
    addedDependencies
}

dependencies {
    // Depending on these plugins
    implementation    (libs.errorpronePlugin)
    implementation    (libs.sonarPlugin)
    implementation    (libs.spotlessPlugin)

    // Dependencies added by this plugin to its clients
    // These are not used in this plugin code, but here Dependabot will keep them up to date.
    // The versions are stored in config/datafile-dependencies.properties read by ErrorProneConfigurator.
    addedDependencies (libs.nullaway) {
        transitive = false
    }
    addedDependencies (libs.errorproneCore) {
        transitive = false
    }

    compileOnly       (libs.jspecify)
}

tasks.named('processResources').configure {
    inputs.files(checkstyleConfigFiles)
    inputs.property('errorProneDeps', errorProneDependencies)

    // Checksum each configuration file so it is easy for the plugin to reason about their state
    filesMatching('config/datafile-checksums.properties') {
        filter { l -> l.replace('@CHECKSTYLE_MADA@',  digestFiles(checkstyleConfigFiles)) }
    }
    // Provide the plugin with versions for the dependencies it adds to the client build
    filesMatching('config/datafile-dependencies.properties') {
        filter { l -> l.replace('@DEPENDENCIES@', errorProneDependencies) }
    }
}

gradlePlugin {
    website = 'https://github.com/jskov/mada-style-gradle'
    vcsUrl = 'https://github.com/jskov/mada-style-gradle'
    plugins {
        stylePlugin {
            id = 'dk.mada.style'
            displayName = mavenDisplayName
            description = mavenDescription
            tags.set(['error-prone', 'nullaway', 'checkstyle', 'spotless', 'style'])
            implementationClass = 'dk.mada.style.MadaStylePlugin'
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

publishing {
    repositories {
        maven {
            name = "dist"
            url = "file://${project.rootProject.file("build/dist").getAbsolutePath()}"
        }
    }
}

project.afterEvaluate { p ->
    tasks.withType(GenerateMavenPom).all {
        getPom().url = 'https://github.com/jskov/mada-style-gradle'
        getPom().name = mavenDisplayName
        getPom().description = mavenDescription

        getPom().developers {
            developer {
                id = 'jskov'
                name = 'Jesper Skov'
                email = 'jskov@mada.dk'
            }
        }
        getPom().licenses {
            license {
                name = 'Licensed under the EUPL-1.2-or-later'
                url = 'https://joinup.ec.europa.eu/sites/default/files/custom-page/attachment/2020-03/EUPL-1.2%20EN.txt'
            }
        }
        getPom().scm {
            connection = 'scm:git:git://github.com/jskov/mada-style-gradle.git'
            developerConnection = 'scm:git:ssh://github.com:jskov/mada-style-gradle.git'
            url = 'https://github.com/jskov/mada-style-gradle/'
        }
    }
}

tasks.named('eclipse').configure {
    doLast { project.mkdir("build/pluginUnderTestMetadata") }
}

String digestFiles(List<RegularFile> files) {
    def digester = java.security.MessageDigest.getInstance("MD5")
    for (RegularFile f : files) {
        byte[] b = f.getAsFile().readBytes()
        digester.update(b)
    }
    return java.util.HexFormat.of().formatHex(digester.digest())
}

String getErrorProneDependencies() {
    return project.configurations.addedDependencies.collect { f ->
            f.toString().replaceAll(".*files-2.1/", "").replaceFirst("/", "\\\\:").replaceFirst("/", "=").replaceAll("/.*", "")
        }.join('\n')
}
